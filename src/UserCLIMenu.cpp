// user-cli-menu.cpp



// #include <string>
#include <variant>
#include <iostream>
#include <limits>

// move this to the device class... good idea ?
// #include "ReadCSVFile.cpp"
// #include "../include/ReadCSVFile.h"


#include "../include/Device.h"
#include "../include/Thermostat.h"
#include "../include/TV.h"
#include "../include/Lights.h"
#include "../include/SecuritySystem.h"

/*

- thinking about selections similar to:
    1. Selection 1 - power on and register smart devices which reads smart device CSV file
    2. Selection 2 - thermostat
    3. Selection 3 - TV
    4. Selection 4 - lighting
    5. Selection 5 - security system
    6. Quit

- if i have enough time maybe add some functionality to list devices and/or device info
- if i have enough time maybe make the CLI menu dynamic and generated by the devices
  read from the CSV file or something

- if i were doing this for real, i'd probably make use of IP multicast, wireless, or maybe
  bluetooth and attempt to register the smart devices with the controller if they had
  a valid license or something

- what about loading the smart devices on startup? seems like a good idea.

- can use c++ i/o file that contains latests device settings or defaults etc.

*/
void displayMenu();
void selection1();
void selection2();
void selection3();
void selection4();
void selection5();
void selection6();
void quit();

// need to decide where to put these functions
// i think the menu will call the classes ?
// then the classes will call these functions ?
// void getTVChannel();
// void getTVVolume();
// void getSecurityCode();
// void getThermostatTemp();
// void writeToCSVFile();


void menuRun()
{
    // wanted to let userSelection be of any type
    // this was super hard... so much easier in python
    // couldn't get it to work so just going with type int
    int userSelection = 0;
    int loopCounter = 1;

    while (true)
    {
        
        try
        {
            displayMenu();
            std::cin >> userSelection;

            loopCounter++;

            // fixed infinite loop bug
            // did a test if not 'cin' then clear, ignore, and continue

            if (loopCounter > 10)
            {
                std::cout << "Loop Counter Exceeded... Exiting..." << std::endl;
                return;
            }


            // web search indicates that unlike python
            // if the 'cin' value is not an integer
            // it doesn't capture the input and is an error
            // this is why i had problems fixing the infinite loop

            // test if 'cin' doesn't exist
            // if not clear and ignore
            if (!(std::cin))
            {
                std::cin.clear();
                // std::cin.ignore();
                // used from stackoverflow
                std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
                continue;
            }


            switch (userSelection)
            {
            case 1:
                selection1();
                break;
            case 2:
                selection2();
                break;
            case 3:
                selection3();
                break;
            case 4:
                selection4();
                break;
            case 5:
                selection5();
                break;
            case 6:
                selection6();
                return;
            default:
                std::cin.clear();
                std::cout << std::endl;
                std::cout << std::endl;
                std::cout << "Invalid Selection... Please Make a Different Selection or Enter Option \"6\" to Exit the Menu." << std::endl;
                std::cin >> userSelection;
            }

            // std::cout << std::endl;
            // std::cout << std::endl;
        }
        catch (const std::exception& e)
        {
            std::cerr << e.what() << '\n';
        }
    }
}


// run menu
void displayMenu()
{
    std::cout << std::endl;
    std::cout << "===============================" << std::endl;
    std::cout << "=          Main Menu          =" << std::endl;
    std::cout << "===============================" << std::endl;
    std::cout << std::endl;
    std::cout << "1) Power on and register smart devices" << std::endl;
    std::cout << "2) Thermostat" << std::endl;
    std::cout << "3) TV" << std::endl;
    std::cout << "4) Lighting" << std::endl;
    std::cout << "5) Initialize security system" << std::endl;
    std::cout << "6) Quit" << std::endl;
    std::cout << std::endl;
    std::cout << "Please Make a Selection: ";

}


// smart device functions
// void getTVChannel()
// {
//     std::cout << std::endl;
//     std::cout << "Enter TV Channel: ";
//     int tvChannel;
//     std::cin >> tvChannel;
//     std::cout << "TV Channel: " << tvChannel << std::endl;
// }


// selection 1 power on
void selection1()
{
    std::cout << std::endl;
    std::cout << "Selection 1: Power on and register smart devices";
    std::cout << std::endl << std::endl;

    // tried for hours to instantiate Device class here
    // and call readCSVFile() from the member function displayDeviceInfo()
    // couldn't get it to work
    // giving up on it
    Device device;
    device.displayDeviceInfo("data/csv01.csv");
    // unable to make relative file path work
    // device.displayDeviceInfo("../../data/csv01.csv");

}

// selection 2 thermostat
void selection2()
{
    std::cout << std::endl;
    std::cout << "Selection 2: Thermostat" << std::endl;
    std::cout << std::endl << std::endl;

    int daytimeTemp = 0;
    int nighttimeTemp = 0;
    int currentTemp = 0;

    std::cout << "Desired Daytime Temperature:" << std::endl;
    std::cin >> daytimeTemp;
    std::cout << "Desired Nighttime Temperature:" << std::endl;
    std::cin >> nighttimeTemp;
    std::cout << "Current Temperature:" << std::endl;
    std::cin >> currentTemp;

    Thermostat myThermostat(daytimeTemp, nighttimeTemp, currentTemp);
    myThermostat.displayCurrentTemp();
    myThermostat.displayDesiredTemp();

}

// selection 3 TV
void selection3()
{
    std::cout << std::endl;
    std::cout << "Selection 3: TV" << std::endl;
    std::cout << std::endl << std::endl;

    int desiredChannel = 0;
    int desiredVolume = 0;

    std::cout << "Desired Channel:" << std::endl;
    std::cin >> desiredChannel;
    std::cout << "Desired Volume:" << std::endl;
    std::cin >> desiredVolume;

    TV myTV(desiredChannel, desiredVolume);
    myTV.setChannel();
    myTV.setVolume();

}

// selection 4 lighting
void selection4()
{
    std::cout << std::endl;
    std::cout << "Selection 4: Lighting" << std::endl;
    std::cout << std::endl << std::endl;

    Lights myLights;
    myLights.turnOn();
    myLights.displayStatus();
}

// selection 5 security system
void selection5()
{
    std::cout << std::endl;
    std::cout << "Selection 5: Security system" << std::endl;
    std::cout << std::endl << std::endl;

    SecuritySystem mySecuritySystem;
    mySecuritySystem.securityInit("data/securitysystem.csv");

    // mySecuritySystem.arm(codeFromFile);
    // mySecuritySystem.disarm(codeFromFile);
}

// quit
void selection6()
{
    std::cout << std::endl;
    std::cout << "Quitting..." << std::endl;
    std::cout << std::endl;
}
